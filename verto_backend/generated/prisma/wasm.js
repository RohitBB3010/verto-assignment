
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  department: 'department',
  role: 'role',
  dateOfJoining: 'dateOfJoining',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Deparment = exports.$Enums.Deparment = {
  ENGINEERING: 'ENGINEERING',
  HUMAN_RESOURCES: 'HUMAN_RESOURCES',
  SALES: 'SALES',
  MARKETING: 'MARKETING',
  CUSTOMER_SERVICE: 'CUSTOMER_SERVICE',
  FINANCE: 'FINANCE',
  OPERATIONS: 'OPERATIONS',
  LEGAL: 'LEGAL'
};

exports.Role = exports.$Enums.Role = {
  INTERN: 'INTERN',
  JUNIOR_ENGINEER: 'JUNIOR_ENGINEER',
  SENIOR_ENGINEER: 'SENIOR_ENGINEER',
  PROJECT_MANAGER: 'PROJECT_MANAGER',
  TEAM_LEAD: 'TEAM_LEAD',
  DEVOPS_ENGINEER: 'DEVOPS_ENGINEER',
  HR_ASSOCIATE: 'HR_ASSOCIATE',
  SALES_JUNIOR_EXECUTIVE: 'SALES_JUNIOR_EXECUTIVE',
  SALES_SENIOR_EXECUTIVE: 'SALES_SENIOR_EXECUTIVE',
  MARKETING_EXECUTIVE: 'MARKETING_EXECUTIVE',
  FINANCE_MANAGER: 'FINANCE_MANAGER',
  FINANCE_ANALYST: 'FINANCE_ANALYST',
  CUSTOMER_ASSOCIATE: 'CUSTOMER_ASSOCIATE'
};

exports.Prisma.ModelName = {
  employee: 'employee'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\PROGRAMMING\\VERTO_ASSIGNMENT\\verto_backend\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\PROGRAMMING\\VERTO_ASSIGNMENT\\verto_backend\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel employee {\n  id            Int       @id @default(autoincrement())\n  name          String\n  email         String    @unique\n  phone         String?\n  department    Deparment\n  role          Role\n  dateOfJoining DateTime\n  createdAt     DateTime  @default(now())\n  updatedAt     DateTime\n}\n\nenum Deparment {\n  ENGINEERING\n  HUMAN_RESOURCES\n  SALES\n  MARKETING\n  CUSTOMER_SERVICE\n  FINANCE\n  OPERATIONS\n  LEGAL\n}\n\nenum Role {\n  INTERN\n  JUNIOR_ENGINEER\n  SENIOR_ENGINEER\n  PROJECT_MANAGER\n  TEAM_LEAD\n  DEVOPS_ENGINEER\n  HR_ASSOCIATE\n  SALES_JUNIOR_EXECUTIVE\n  SALES_SENIOR_EXECUTIVE\n  MARKETING_EXECUTIVE\n  FINANCE_MANAGER\n  FINANCE_ANALYST\n  CUSTOMER_ASSOCIATE\n}\n",
  "inlineSchemaHash": "93aad0f479e7c3c3c869a0bc4a1ec8ea1724b24d50a49bcbbfd09982a06588eb",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"employee\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"department\",\"kind\":\"enum\",\"type\":\"Deparment\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"dateOfJoining\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

